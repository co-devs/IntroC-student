// Answering these questions will earn 2 flags (6pts) and there's a third flag available at the bottom for determining the output of the code.

// Define what it means when someone refers to data types in C.
// Fill in the following table:
// Type:            Storage Size:   Value Range:
// char             1 byte          -128 to 127 or 0 to 255
// unsigned char    1 byte          0 to 255
// signed char      1 byte          -128 to 127
// integer          2 or 4 bytes    -32768 to 32767 or -2147483648 to 2147483647
// unsigned int     2 or 4 bytes    0 to 65535 or 0 to 4294967295
// short            2 bytes         -32768 to 32767
// unsigned short   2 bytes         0 to 65535
// long             4 bytes         -2147483648 to 2147483647
// unsigned long    4 bytes         0 to 4294967295

// What is the difference between unsigned and signed integer types?
// Signed can be negative, unsigned can not

// Fill in the missing pieces:
// Type:        Storage Size:       Precision:
// float        4 byte              6 decimal places
// double       8 byte              15 decimal places
// long double  a                   19 decimal places

// How are floating point types different than integer types?
// Floating point types have decimal values, integers do not
// Why are they useful?
// They can provide greater precision than integers

// Give an example that would require you to use floating point as opposed to integer.
// For currency calculations. Decimal required

// Explain the three kinds of situations that a "void" type would be used.
// 1. Function returns as void
//      Function does not return a value
// 2. Function arguments as void
//      An argument is not needed for the function, for example generating a random number
// 3. Pointers to void
//      To represent the address of an object as opposed to its type

// Use the following program to help you answer the questions above and earn a third flag. What is the ouput of this program? SHA1 hash the final answer. Submit the hash to the CTF server for points.

#include  <stdio.h>

int main()
{
	signed char chr;
	chr = 128;
	printf("%d\n", chr);
	return 0;
}
// The above code returns 0 but prints 128
